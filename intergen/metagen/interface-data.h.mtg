#pragma once

#ifndef _INTERGEN_GENERATED__$name$_H_
#define _INTERGEN_GENERATED__$name$_H_

//@file Interface file for $name$ interface generated by intergen
//See LICENSE file for copyright and license information

//host class: $classnsx suffix="::"$$class$
//source file $srcfile$
#include <comm/commexception.h>
#include <comm/intergen/ifc.h>
$-(if ?base)$

#include "$baseclass$.h"
$(/if)$
$-[pasters]$

$@value$
$-[/pasters]$

$[classnsx after="    "]$namespace $@value$ {
$[/classnsx]-$
$classorstruct$ $class$;
$-[classnsx first="\r\n"]$}$[/classnsx]$

$-[ns]$
namespace $@value$ {
$-[/ns]$
////////////////////////////////////////////////////////////////////////////////
$-(if !comments.empty)$$[comments]$
$@value$
$-[/comments]$$(/if)$
class $name$ : public intergen_data_interface
{
public:
$-[pasteinners]$

$@value$
$-[/pasteinners]$
$-(if ?callback)$

    // --- callback declarations ---

$-[callback]$
    using $name$ = $return.type$ (*)($[args rest=", "]$$type$ $(if ?fnarg)$( $-memfnclass after="::"-$ *$name$)($fnargs$)$(elif)$$name$$(/if)$$size$$[/args]$);
$-[/callback]$

$-(/if ?callback)$

    // --- interface methods ---

$-[method !static !destroy]$
$(if !comments.empty)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    $(if ?..virtual)$virtual $(/if)$$return.type$ $name$($[args rest=", "]$$ifckwds after=" "$$type$ $(if ?fnarg)$( $-memfnclass after="::"-$ *$name$)($fnargs$)$(elif)$$name$$(/if)$$size$ $-(if ?defval)$ = $defval$$(/if)$$[/args]$) $-(if ?const)$ const$(/if)$$(if ?..virtual)$ = 0$(/if)$;
$[/method]-$

    // --- creators ---
$-[method ?creator]$

$(if !comments.empty)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    static $..name$* $name$($-[args rest=" ,"]$ $-type$ $name$$size$ $-(if ?defval)$ = $defval$$(/if)$$[/args]$);
$-[/method]$

    // --- internal helpers ---

    ///Interface revision hash
    inline static const int HASHID = $hash$u;

    ///Interface name (full ns::class string)
    inline static const coid::tokenhash& IFCNAME = "$ns suffix="::"$$name$"_T;

private:

    inline static const coid::ifcman::data_ifc_descriptor* _difc = 0;
    inline static intergen_data_interface::icr_t* _cr_table = 0;
    inline static intergen_data_interface::ifn_t* _fn_table = 0;

public:

    static const coid::ifcman::data_ifc_descriptor* get_data_ifc_descriptor() {
        if (_difc)
            return _difc;

        _difc = coid::ifcman::get_type_ifc<$name$>(HASHID);
        if (_difc) {
            _cr_table = _difc->_cr_table;
            _fn_table = _difc->_fn_table;
        }
        else {
            log_mismatch("$name$"_T, "$ns suffix="::"$$name$.$name$"_T, "@$hash$"_T);
        }

        return _difc;
    }
};
$-[pasteafters]$

$@value$
$-[/pasteafters]$

////////////////////////////////////////////////////////////////////////////////
#pragma warning(push)
#pragma warning(disable : 4191)

$-[method !static !destroy !virtual]$
$(if !comments.empty)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
inline $return.type$ $..name$::$name$($[args rest=", "]$$ifckwds after=" "$$type$ $(if ?fnarg)$( $-memfnclass after="::"-$ *$name$)($fnargs$)$(elif)$$name$$(/if)$$size$$[/args]$) $-(if ?const)$ const$(/if)$
{ return DT_CALL($return.type$,($[args rest=","]$ $-(if ?fnarg)$$type$($memfnclass after="::"$*)($fnargs$)$(elif)$$type$$(/if)-$ $size$$[/args]$) $-(if ?const)$ const$(/if)$,$index$)($[args rest=","]$ $-(if ?xref)$std::forward<$basetype$>($(/if)-$ $name$ $-(if ?xref)$)$(/if)-$ $[/args]$); }
$[/method]-$

#pragma warning(pop)

$-[method ?static]$
////////////////////////////////////////////////////////////////////////////////
inline $..name$* $..name$::$name$($-[args rest=", "]$$type$ $name$$size$$[/args]$)
{
    if (!_difc)
        get_data_ifc_descriptor();

    typedef $..name$* (*fn_creator)($[args rest=", "]$$type$$[/args]$);
    static fn_creator create = reinterpret_cast<fn_creator>(_cr_table[$@order$]);

    return create($[args rest=", "]$$name$$[/args]$);
}

$-[/method]$
$-[ns]$
} //namespace
$-[/ns]$

#endif //_INTERGEN_GENERATED__$name$_H_

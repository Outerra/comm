
//This file was generated by intergen
//Modify it if you like your changes being periodically discarded :)

public:
$-[method]$
#define rl_$name$(r$(if !static !ptr !iref)$,t$(/if)$ $-[args !retarg !sizearg]$,$name$$[/args]$)\
    rl_$name$_(__FILE__,std::source_location::current().line(),r$(if !static !ptr !iref)$,t$(/if)$ $-[args !retarg !sizearg]$,$name$$[/args]$)

    $(if ?templarg.nonzero)$template<$templarg$>
    $(/if)-$
    $-(if ?static)$static $(/if)-$
$-(if ?name="create")$static ref<$..class$> rl_create_(
$-(elif ?sizearg)$void rl_$name$_(
$-(elif)$$rettype$ rl_$name$_(
$-(/if)$
        const char* __file__, int __line__, const ref<render_list>& rl
$-(if !static)-$
$-(if !ptr !iref)$,
        const ref<$..class$>& that
$-(/if)$
$-(/if)$
    $-[args !retarg !sizearg]$,
        $type$
        $-ref-$
        $-ptr-$
        $-(if ?rvalue)$&&$(/if)-$
        $-(if ?const)$ const$(/if)$ $name$
        $-(if ?size)$[$size$]$(/if)$
        $-(if ?defval)$ = $defval$$(/if)$
    $-[/args]$)
    {
$-(if ?name="create")$
        ref<$..class$> obj = new $..class$;
        new(rl.get()) cmd_$name$$overload$$templsub$(__file__,__line__,obj$[args !retarg !sizearg]$, $(if ?rvalue)$std::move($name$)$(elif)$$name$$(/if)$$[/args]$);
        return obj;
$-(elif !static)$
        new(rl.get()) cmd_$name$$overload$$templsub$(__file__,__line__,
        $-(if ?ptr)-$this$(elif ?iref)$this$(elif)$that$(/if)-$
        $-[args !retarg !sizearg]$, $(if ?rvalue)$std::move($name$)$(elif)$$name$$(/if)$$[/args]$);
$-(elif)$
        new(rl.get()) cmd_$name$$overload$$templsub$(__file__,__line__$[args !retarg !sizearg]$, $(if ?rvalue)$std::move($name$)$(elif)$$name$$(/if)$$[/args]$);
$-(/if)$
$(if ?retexpr !sizearg)$
        return ($rettype$)rl->add_raw($retexpr$);
$(/if)-$
    }
$(if ?name="create")$
    ///Initialize the object created by new
    void rl_init(const ref<render_list>& rl
    $-[args !retarg !sizearg]$,
        $type$
        $-ref-$
        $-ptr-$
        $-(if ?const)$ const$(/if)$ $name$
        $-(if ?size)$[$size$]$(/if)$
        $-(if ?defval)$ = $defval$$(/if)$
    $-[/args]$)
    {
        new(rl.get()) cmd_$name$$overload$$templsub$(this$[args !retarg !sizearg]$, $name$$[/args]$);
    }
$-(/if)$
$[/method]$


protected:
$[method]$
    $(if ?templarg.nonzero)$template<$templarg$>
    $(/if)$class cmd_$name$$overload$
        : public renderer_cmd
    {
    private:
        const char* __file__;
        int __line__;

    $-(if !static)$
      $-(if ?ptr)$
        $..class$* _obj;
      $-(elif ?iref)$
        iref<$..class$> _obj;
      $-(elif)$
        ref<$..class$> _obj;
      $-(/if)$
    $(/if)$
    $-[args !retarg !sizearg]$
      $-(if ?ptr)$
        $-(if ?type="texture")$
        ref<$type$> _$name$;
        $-(elif)$
        $type$$ptr$ _$name$ $-(if ?size)$[$size$]$(/if)$;
        $-(/if)$
      $-(elif)$
        $type$ _$name$ $-(if ?size)$[$size$]$(/if)$;
      $-(/if)$
    $-[/args]$

    public:
        cmd_$name$$overload$(
            const char* __file__,
            int __line__
$-(if !static)$,
  $-(if ?ptr)$
            $..class$* obj
  $-(elif ?iref)$
            $..class$* obj
  $-(elif)$
            const ref<$..class$>& obj
  $-(/if)$
            $-[args !retarg !sizearg]-$,
            $type$$ptr$$ref$ $-(if ?rvalue)$&&$(/if)$ $-(if ?const)$ const$(/if)$ $name$ $-(if ?size)$[$size$]$(/if)$ $-[/args]$)
            : __file__(__file__), __line__(__line__), _obj(obj) $-[args !retarg !sizearg !size]$
            , _$name$($(if ?rvalue)$std::move($name$)$(elif)$$name$$(/if)$) $-[/args]$ {
  $-[args ?size]$
            {for (uint n=($size$),i=0; i<n; ++i) _$name$[i] = $name$[i];}
  $-[/args]$
        }
$-(elif)$
            $-[args !retarg !sizearg]$,
            $type$$ptr$$ref$ $-(if ?rvalue)$&&$(/if)$ $-(if ?const)$ const$(/if)$ $name$ $-(if ?size)$[$size$]$(/if)$ $-[/args]$)
            : __file__(__file__), __line__(__line__)$[args !retarg !sizearg !size]$, _$name$($(if ?rvalue)$std::move($name$)$(elif)$$name$$(/if)$)
            $[/args]${
  $-[args ?size]$
            {for (uint n=($size$),i=0; i<n; ++i)  _$name$[i] = $name$[i];}
  $-[/args]$
        }
$-(/if)$

        virtual coid::token_literal command_name() const override { return "$name$$overload$"; }

        virtual void onCommand(renderer* const r__) override {
            $(if ?..class="renderer")$r__->$(elif !static)$_obj->$(/if)-$$..class$::$name$(
            $-[args rest=", "]-$
$-(if ?retarg)-$(const $..rettype$)data_ptr(this)
$-(elif ?sizearg)-$data_size(this)
$-(elif)-$$(if ?rvalue)$std::move(_$name$)$(elif)$_$name$$(/if)$
$-(/if)-$
            $-[/args]$);
        }
    };
$[/method]-$


#ifndef __INTERGEN_GENERATED__$name$_H__
#define __INTERGEN_GENERATED__$name$_H__

//@file Interface file for $name$ interface generated by the intergen tool

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>

$-(if base?)$#include "$baseclass$.h"$(/if)$

$-[pasters]-$
$@value$
$-[/pasters]-$

$-[ns]$
namespace $@value$ {
$-[/ns]$

////////////////////////////////////////////////////////////////////////////////
$-(if !comments.empty?)$$[comments]$
$@value$
$-[/comments]$$(/if)$
class $name$
    : public $(if base?)$$base$$(elif)$intergen_interface$(/if)$
{
public:

    // --- interface methods ---

$-[method !static? !destroy?]$
$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    $(if ..virtual?)$virtual $(/if)$$return.type$ $name$($[args rest="," after=" "]$ $(if outarg?)$$(if inarg?)$ifc_inout$(elif)$ifc_out$(/if)$ $(/if)-$ $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$) $-(if const?)$ const$(/if)$;
$[/method]-$

    // --- interface events ---

$-[event !static?]$
$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    virtual $return.type$ $name$($[args rest="," after=" "]$ $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$)
    $-(if return.type?="void")$ {}$(elif)$ $default_event_body$$(/if)$
$-[/event]$

$-[event !static?]$
    virtual bool is_implemented_$name$() { return true; }
$-[/event]$
$-(if event.empty!)$

    virtual void force_bind_script_events() {}
$-(/if)$

    // --- creators ---

$-[method static?]$
$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    static iref<$..name$> $name$(
        $-[args rest="," after=" "]$ $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$) {
        return $name$<$..name$>(0$[args]$, $name$$[/args]$);
    }

    template<class T>
    static iref<T> $name$( T* _subclass_$[args]$, $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$ );
$-[/method]$

    // --- internal helpers ---
$-(if varname? destroy.name.empty?)$

    virtual ~$name$() {
        if(_cleaner) _cleaner(this,0);
    }
$-(/if)$

    static const int HASHID = $hash$;
    
    int intergen_hash_id() const override { return HASHID; }

    const coid::token& intergen_default_creator() const override {
$-(if default_creator.name.empty?)$
        static const coid::token _DC("");
$-(elif)$
        static const coid::token _DC("$ns rest="::" after="::"$$name$.$default_creator.name$@$hash$");
$-(/if)$
        return _DC;
    }

protected:
$-(if varname?)$

    typedef void (*cleanup_fn)($name$*, intergen_interface*);
    cleanup_fn _cleaner;
$-(/if)$
$-(if destroy.name.empty!)$

    ~$name$() {
        VT_CALL($destroy.return.type$,($[destroy.args rest=","]$$type$$[/destroy.args]$),0)($[destroy.args rest=","]$$name$$[/destroy.args]$);
$-(if varname?)$
        if(_cleaner) _cleaner(this,0);
$-(/if)$
    }
$-(/if)$

    $name$()$(if varname?)$ : _cleaner(0)$(/if)$
    {}
};

$-[method static?]$
////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> $..name$::$name$( T* _subclass_
    $-[args]$, $type$ $name$$size$$[/args]$ )
{
    typedef iref<T> (*fn_creator)($..name$*$[args]$, $type$$[/args]$);

    static fn_creator create = 0;
    static const coid::token ifckey = "$..ns rest="::" after="::"$$..name$.$name$@$..hash$";

    if(!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if(!create)
        throw coid::exception("interface creator inaccessible: ") << ifckey;

    return create(_subclass_$[args]$, $name$$[/args]$);
}
$-[/method]$


$-[method !static? !destroy?]$
inline $return.type$ $..name$::$name$($[args rest="," after=" "]$ $type$ $name$$size$$[/args]$) $-(if const?)$ const$(/if)$
{ return VT_CALL($return.type$,($[args rest=","]$$type$$[/args]$),$index$)($[args rest=","]$$name$$[/args]$); }
$[/method]-$

$-[ns]$
} //namespace
$-[/ns]$

#endif //__INTERGEN_GENERATED__$name$_H__


#ifndef __INTERGEN_GENERATED__$name$_JS_H__
#define __INTERGEN_GENERATED__$name$_JS_H__

//@file Javascript interface file for $name$ interface generated by intergen v$version$

#include "$hdrfile$"

#include <comm/intergen/ifc.js.h>
#include <comm/token.h>

$-[ns]$
namespace $@value$ {
$-[/ns]$
namespace js {

class $name$
{
public:
$-[method static?]$

$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    //@param scriptpath path to js script to bind to
    static iref<$..ns rest="::"$::$..name$> $name$( const script_handle& script
        $-[args]$, $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$, const coid::token& bindvar = coid::token(), v8::Handle<v8::Context>* ctx=0 )
    {
        typedef iref<$..ns rest="::"$::$..name$> (*fn_bind)(const script_handle&$[args]$, $type$$[/args]$, const coid::token&, v8::Handle<v8::Context>*);
        static fn_bind binder = 0;
        static const coid::token ifckey = "$..ns rest="::" after="::"$js::$..name$.$name$@creator";
        
        if(!binder)
            binder = reinterpret_cast<fn_bind>(
                coid::interface_register::get_interface_creator(ifckey));

        if(!binder)
            throw coid::exception("interface binder inaccessible: ") << ifckey;

        return binder(script$[args]$, $name$$[/args]$, bindvar, ctx);
    }
$-[/method]$
};

} //namespace js
$-[ns]$
} //namespace
$-[/ns]$


#endif //__INTERGEN_GENERATED__$name$_JS_H__

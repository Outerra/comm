
//This file was generated by intergen
//Modify it if you like your changes being periodically discarded :)

public:
$-[method]$
    $(if templarg.nonzero?)$template<$templarg$>
    $(/if)-$
    $-(if static?)$static $(/if)-$
$-(if name?="create")$static ref<$..class$> rl_create(
$-(elif sizearg?)$void rl_$name$(
$-(elif)$$rettype$ rl_$name$(
$-(/if)$
        const rl_ref& rl
$-(if !static?)-$
$-(if !ptr? !iref?)$,
        const ref<$..class$>& that
$-(/if)$
$-(/if)$
    $-[args !retarg? !sizearg?]$,
        $type$
        $-ref-$
        $-ptr-$
        $-(if const?)$ const$(/if)$ $name$
        $-(if size?)$[$size$]$(/if)$
        $-(if defval?)$ = $defval$$(/if)$
    $-[/args]$)
    {
$-(if name?="create")$
        ref<$..class$> obj = new $..class$;
        new(rl.get()) cmd_$name$$overload$$templsub$(obj$[args !retarg? !sizearg?]$, $name$$[/args]$);
        return obj;
$-(elif !static?)$
        new(rl.get()) cmd_$name$$overload$$templsub$(
        $-(if ptr?)-$this$(elif iref?)$this$(elif)$that$(/if)-$
        $-[args !retarg? !sizearg?]$, $name$$[/args]$);
$-(elif)$
        new(rl.get()) cmd_$name$$overload$$templsub$($[args rest=", " !retarg? !sizearg?]$$name$$[/args]$);
$-(/if)$
$(if retexpr? !sizearg?)$
        return ($rettype$)rl->add_raw($retexpr$);
$(/if)-$
    }
$(if name?="create")$
    ///Initialize the object created by new
    void rl_init(const rl_ref& rl
    $-[args !retarg? !sizearg?]$,
        $type$
        $-ref-$
        $-ptr-$
        $-(if const?)$ const$(/if)$ $name$
        $-(if size?)$[$size$]$(/if)$
        $-(if defval?)$ = $defval$$(/if)$
    $-[/args]$)
    {
        new(rl.get()) cmd_$name$$overload$$templsub$(this$[args !retarg? !sizearg?]$, $name$$[/args]$);
    }
$-(/if)$
$[/method]$


protected:
$[method]$
    $(if templarg.nonzero?)$template<$templarg$>
    $(/if)$class cmd_$name$$overload$
        : public renderer_cmd
    {
    private:
    $-(if !static?)$
      $-(if ptr?)$
        $..class$* obj;
      $-(elif iref?)$
        iref<$..class$> obj;
      $-(elif)$
        ref<$..class$> obj;
      $-(/if)$
    $(/if)$
    $-[args !retarg? !sizearg?]$
      $-(if ptr?)$
        $-(if type?="texture")$
        ref<$type$> $name$;
        $-(elif)$
        $type$$ptr$ $name$ $-(if size?)$[$size$]$(/if)$;
        $-(/if)$
      $-(elif)$
        $type$ $name$ $-(if size?)$[$size$]$(/if)$;
      $-(/if)$
    $-[/args]$ 

    public:
        cmd_$name$$overload$(
$-(if !static?)$
  $-(if ptr?)$
            $..class$* obj
  $-(elif iref?)$
            $..class$* obj
  $-(elif)$
            const ref<$..class$>& obj
  $-(/if)$
            $-[args !retarg? !sizearg?]-$,
            $type$$ptr$$ref$ $-(if const?)$ const$(/if)$ $name$ $-(if size?)$[$size$]$(/if)$ $-[/args]$)
            : obj(obj) $-[args !retarg? !sizearg? !size?]$
            , $name$($name$) $-[/args]$ {
  $-[args size?]$
            {for( uint n=($size$),i=0; i<n; ++i )  this->$name$[i] = $name$[i];}
  $-[/args]$
        }
$-(elif)$
            $-[args rest="," !retarg? !sizearg?]$
            $type$$ptr$$ref$ $-(if const?)$ const$(/if)$ $name$ $-(if size?)$[$size$]$(/if)$ $-[/args]$)
            $[args first=":" rest="," !retarg? !sizearg? !size?]$ $name$($name$)
            $[/args]${
  $-[args size?]$
            {for( uint n=($size$),i=0; i<n; ++i )  this->$name$[i] = $name$[i];}
  $-[/args]$
        }
$-(/if)$

        virtual void onCommand(renderer* const r__) {
            $(if ..class?="renderer")$r__->$(elif !static?)$obj->$(/if)-$$..class$::$name$(
            $-[args rest=", "]-$
$-(if retarg?)-$(const $..rettype$)data_ptr(this)
$-(elif sizearg?)-$data_size(this)
$-(elif)-$$name$
$-(/if)-$
            $-[/args]$);
        }
    };
$[/method]-$

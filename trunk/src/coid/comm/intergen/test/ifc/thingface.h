
#ifndef __INTERGEN_GENERATED__thingface_H__
#define __INTERGEN_GENERATED__thingface_H__

//@file Interface file for thingface interface generated by intergen

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>


namespace ifc1 {
namespace ifc2 {

////////////////////////////////////////////////////////////////////////////////
class thingface
    : public intergen_interface
{
public:

    // --- interface methods ---

    int hallo( int a, const coid::token& b, ifc_out coid::charstr& c );

    coid::charstr fallo( bool b, const char* str );

    // --- interface events ---

    virtual void boo( const char* key ) {}

    virtual bool is_implemented_boo() { return true; }

    virtual void force_bind_script_events() {}

    // --- creators ---

    static iref<thingface> get() {
        return get<thingface>(0);
    }

    template<class T>
    static iref<T> get( T* _subclass_ );

    // --- internal helpers ---

    static const int HASHID = 324072501;
    
    int intergen_hash_id() const override { return HASHID; }
    
    const coid::token& intergen_interface_name() const override {
        static const coid::token _name = "ifc1::ifc2::thingface";
        return _name;
    }

    const coid::token& intergen_default_creator() const override {
        static const coid::token _dc("ifc1::ifc2::thingface.get@324072501");
        return _dc;
    }

    void* intergen_wrapper_js() const override {
        static void* _js_create_wrapper=0;
        if(_js_create_wrapper)
            return _js_create_wrapper;

        static const coid::token _js_wrapper_key = "ifc1::ifc2::js::thingface@wrapper";
        _js_create_wrapper = coid::interface_register::get_interface_creator(_js_wrapper_key);
        return _js_create_wrapper;
    }
    
protected:

    typedef void (*cleanup_fn)(thingface*, intergen_interface*);
    cleanup_fn _cleaner;

    ~thingface() {
        VT_CALL(void,(),0)();
        if(_cleaner) _cleaner(this,0);
    }

    thingface() : _cleaner(0)
    {}
};

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> thingface::get( T* _subclass_ )
{
    typedef iref<T> (*fn_creator)(thingface*);

    static fn_creator create = 0;
    static const coid::token ifckey = "ifc1::ifc2::thingface.get@324072501";

    if(!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if(!create)
        throw coid::exception("interface creator inaccessible: ") << ifckey;

    return create(_subclass_);
}


inline int thingface::hallo( int a, const coid::token& b, coid::charstr& c )
{ return VT_CALL(int,(int,const coid::token&,coid::charstr&),1)(a,b,c); }

inline coid::charstr thingface::fallo( bool b, const char* str )
{ return VT_CALL(coid::charstr,(bool,const char*),2)(b,str); }

} //namespace
} //namespace

#endif //__INTERGEN_GENERATED__thingface_H__


//@file  interface dispatcher generated by intergen

#include "ifc/thingface.h"
#include "test.hpp"

#include <comm/ref.h>
#include <comm/singleton.h>
#include <type_traits>

using namespace coid;

static_assert( std::is_base_of<policy_intrusive_base, n1::n2::thing>::value, "class 'thing' must be derived from coid::policy_intrusive_base");

////////////////////////////////////////////////////////////////////////////////
// interface thingface of class thing

namespace ifc1 {
namespace ifc2 {

///
class thingface_dispatcher : public thingface
{
private:

    static ifn_t* get_vtable()
    {
        static ifn_t* vtable = 0;
        if(vtable) return vtable;

        vtable = new ifn_t[3];
        vtable[0] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&n1::n2::thing::destroy));
        vtable[1] = reinterpret_cast<ifn_t>(static_cast<int(policy_intrusive_base::*)(int,const coid::token&,coid::charstr&)>(&n1::n2::thing::hallo));
        vtable[2] = reinterpret_cast<ifn_t>(static_cast<coid::charstr(policy_intrusive_base::*)(bool,const char*)>(&n1::n2::thing::fallo));
        return vtable;
    }

    ///Cleanup routine called from ~thingface()
    static void _cleaner_callback( thingface* m, intergen_interface* ifc ) {
        policy_intrusive_base* host = static_cast<thingface_dispatcher*>(m)->_host.get();
        if(host) static_cast<n1::n2::thing*>(host)->_ifc = ifc;
    }
    
public:

    // creator methods
    
    static iref<thingface> get( thingface* __here__ )
    {
        iref<n1::n2::thing> host = n1::n2::thing::get_thing();

        //remove cleaner from previously bound client
        if(host->_ifc)
            static_cast<thingface_dispatcher&>(*host->_ifc)._cleaner = 0;

        thingface_dispatcher* __disp__ = static_cast<thingface_dispatcher*>(__here__);
        if(!__disp__)
            __disp__ = new thingface_dispatcher;

        __disp__->_host.create(host.get());
        __disp__->_vtable = get_vtable();
        __disp__->_cleaner = &_cleaner_callback;
        
        host->_ifc = __disp__;
        
        return iref<thingface>(__disp__);
    }

    ///Register interface creators to a global registry
    static void* register_interfaces()
    {
        interface_register::register_interface_creator(
            "ifc1::ifc2::thingface::get@2012066119", (void*)&get);

        return (void*)&register_interfaces;
    }
};

//auto-register the available interface creators
static void* thingface_autoregger = thingface_dispatcher::register_interfaces();

void* force_register_thingface() {
    return thingface_dispatcher::register_interfaces();
}

} //namespace
} //namespace

// events

namespace n1 {
namespace n2 {

void thing::boo( const char* key )
{
    return static_cast<ifc1::ifc2::thingface&>(*_ifc).boo(key);
}

} //namespace
} //namespace

